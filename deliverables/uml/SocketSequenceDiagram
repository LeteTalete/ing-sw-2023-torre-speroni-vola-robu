library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity project_reti_logiche is
    port(
        i_clk : in STD_LOGIC;
        i_rst : in STD_LOGIC;
        i_w: in STD_LOGIC;
        i_start : in std_logic;
        
        o_z0 : out std_logic_vector(7 downto 0);
        o_z1 : out std_logic_vector(7 downto 0);
        o_z2 : out std_logic_vector(7 downto 0);
        o_z3 : out std_logic_vector(7 downto 0);
        o_done : out std_logic;
        
        o_mem_addr : out std_logic_vector(15 downto 0);
        i_mem_data : in std_logic_vector(7 downto 0);
        o_mem_we : out std_logic;
        o_mem_en : out std_logic        
    );
end entity project_reti_logiche;

architecture Behavioral of project_reti_logiche is
signal o_reg_u : std_logic_vector(1 downto 0);
signal ru_load : std_logic;
signal o_reg_w : std_logic_vector(15 downto 0);
signal rw_load : std_logic;
signal o_demux_0 : std_logic_vector(7 downto 0);
signal o_demux_1 : std_logic_vector(7 downto 0);
signal o_demux_2 : std_logic_vector(7 downto 0);
signal o_demux_3 : std_logic_vector(7 downto 0);
signal o_reg_0 : std_logic_vector(7 downto 0);
signal r0_load : std_logic;
signal o_reg_1 : std_logic_vector(7 downto 0);
signal r1_load : std_logic;
signal o_reg_2 : std_logic_vector(7 downto 0);
signal r2_load : std_logic;
signal o_reg_3 : std_logic_vector(7 downto 0);
signal r3_load : std_logic;
signal d_sel : std_logic;

type S is (SR,S0,S1,S2,S3,S4,S5,S6,S7);
signal cur_state, next_state : S;

begin

--stato di reset
process(i_clk, i_rst)
begin
    if(i_rst = '1') then
        cur_state <= SR;
    elsif i_clk'event and i_clk = '1' then
        cur_state <= next_state;
    end if;
end process;

process(cur_state, i_start)
begin
    next_state <= cur_state;
    case cur_state is
        when SR =>
            if(i_start = '1') then
                next_state <= S1;
            else next_state <= S0;
            end if;
        when S0 =>
            if(i_start = '1') then
                next_state <= S1;
            else next_state <= S0;
            end if;
        when S1 =>
            next_state <= S2;
        when S2 =>    
            next_state <= S3;
        when S3 =>
            if(i_start = '0') then
                next_state <= S4;
            else next_state <= S3;
            end if;
        when S4 =>
            next_state <= S5;
        when S5 =>
            next_state <= S6;
        when S6 =>
            next_state <= S7;
        when S7 =>
            next_state <= S0;
    end case;
end process;

--funzione delle uscite
process(cur_state)
begin
--inizializza valori dei segnali
d_sel <= '0';
ru_load <= '0';
rw_load <= '0';
r0_load <= '0';
r1_load <= '0';
r2_load <= '0';
r3_load <= '0';
o_mem_en <= '0';
o_mem_we <= '0';
o_reg_w <= "0000000000000000";
o_reg_u <= "00";
o_reg_0 <= "00000000";
o_reg_1 <= "00000000";
o_reg_2 <= "00000000";
o_reg_3 <= "00000000";
o_done <= '0';
o_z0 <= "00000000";
o_z1 <= "00000000";
o_z2 <= "00000000";
o_z3 <= "00000000";

case cur_state is
    when SR =>
        ru_load <= '0';
    when S0 =>
        d_sel <= '0';
        o_done <= '0';
        ru_load <= '0';
        o_reg_u <= "00";
        rw_load <= '0';
        r0_load <= '0';
        r1_load <= '0';
        r2_load <= '0';
        r3_load <= '0';
    when S1 =>
        ru_load <= '1';
    when S2 =>
        ru_load <= '1';
    when S3 =>
        ru_load <= '0';
        if(i_start = '1') then
        rw_load <= '1';
        end if;
    when S4 =>
        rw_load <= '0';
        o_mem_en <= '1';
        o_mem_we <= '0';
    when S5 =>
    when S6 =>
        o_mem_en <= '0';
        if(o_reg_u = "00") then
            r0_load <= '1';
        elsif(o_reg_u = "01") then
            r1_load <= '1';
        elsif(o_reg_u = "10") then
            r2_load <= '1';
        elsif(o_reg_u = "11") then
            r3_load <= '1';
        end if;
    when S7 =>
        d_sel <= '1';
        o_done <= '1';
        r0_load <= '0';
        r1_load <= '0';
        r2_load <= '0';
        r3_load <= '0';
end case;
end process;

--caricare su o_reg_u
process(i_clk, i_rst, i_w)
begin
if(i_rst = '1') then
    o_reg_u <= "00";
elsif(i_clk'event and i_clk = '1') then
    if(ru_load = '1') then
    --é tutto in parallelo
        o_reg_u(1) <= o_reg_u(0);
        o_reg_u(0) <= i_w;
    end if;
end if;
end process;

--caricare su o_reg_w
process(i_clk, i_rst)
begin
if(i_rst = '1') then
    o_reg_w <= "0000000000000000";
elsif(i_clk'event and i_clk = '1') then
    if(rw_load = '1') then
    --é tutto in parallelo
        o_reg_w(15) <= o_reg_w(14);
        o_reg_w(14) <= o_reg_w(13);
        o_reg_w(13) <= o_reg_w(12);
        o_reg_w(12) <= o_reg_w(11);
        o_reg_w(11) <= o_reg_w(10);
        o_reg_w(10) <= o_reg_w(9);
        o_reg_w(9) <= o_reg_w(8);
        o_reg_w(8) <= o_reg_w(7);
        o_reg_w(7) <= o_reg_w(6);
        o_reg_w(6) <= o_reg_w(5);
        o_reg_w(5) <= o_reg_w(4);
        o_reg_w(4) <= o_reg_w(3);
        o_reg_w(3) <= o_reg_w(2);
        o_reg_w(2) <= o_reg_w(1);
        o_reg_w(1) <= o_reg_w(0);
        o_reg_w(0) <= i_w;
    end if;
end if;
end process;

process(o_reg_u)
begin
case o_reg_u is
    when "00" =>
        o_demux_0 <= i_mem_data;
    when "01" =>
        o_demux_1 <= i_mem_data;
    when "10" =>
        o_demux_2 <= i_mem_data;
    when "11" =>
        o_demux_3 <= i_mem_data;
    when others =>
        o_demux_0 <= "00000000";
        o_demux_1 <= "00000000";
        o_demux_2 <= "00000000";
        o_demux_3 <= "00000000";
end case;
end process;

process(i_clk, i_rst)
begin
if(i_rst = '1') then
    o_reg_0 <= "00000000";
elsif i_clk'event and i_clk = '1' then
    if(r0_load = '1') then
    o_reg_0 <= o_demux_0;
    end if;
end if;
end process;

process(i_clk, i_rst)
begin
if(i_rst = '1') then
    o_reg_1 <= "00000000";
elsif i_clk'event and i_clk = '1' then
    if(r1_load = '1') then
    o_reg_1 <= o_demux_1;
    end if;
end if;
end process;

process(i_clk, i_rst)
begin
if(i_rst = '1') then
    o_reg_2 <= "00000000";
elsif i_clk'event and i_clk = '1' then
    if(r2_load = '1') then
    o_reg_2 <= o_demux_2;
    end if;
end if;
end process;

process(i_clk, i_rst)
begin
if(i_rst = '1') then
    o_reg_3 <= "00000000";
elsif i_clk'event and i_clk = '1' then
    if(r3_load = '1') then
    o_reg_3 <= o_demux_3;
    end if;
end if;
end process;

with d_sel select
o_z0 <= "00000000" when '0',
        o_reg_0 when '1',
        "00000000" when others;
with d_sel select
o_z1 <= "00000000" when '0',
        o_reg_1 when '1',
        "00000000" when others;
        
with d_sel select
o_z2 <= "00000000" when '0',
        o_reg_2 when '1',
        "00000000" when others;

with d_sel select
o_z3 <= "00000000" when '0',
        o_reg_3 when '1',
        "00000000" when others;

end architecture Behavioral;
